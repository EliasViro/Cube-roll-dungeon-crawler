
Atte Aarnio, 19.11.2021

This document is for all developers. This document contains instructions how to create a test setting
to test, for instance, a class that you are working on, and compile it using CMake and finally run the
created executable.

These instructions apply to linux systems (WSL) (at least).


1.  Go to folder 'src' and create your own test.cpp there. There is 'TEST_EXAMPLE.cpp' to demonstrate this.

2.  Open the top level 'CMakeLists.txt'. There you have to modify one line so that the executable is
    created for your test.cpp including its dependencies. Further instructions are commented in the file.
    IMPORTANT: Please do not modify anything else except the specified line in the 'CMakeLists.txt'
    to prevent breaking the CMake configuration.

3.  Once you have gone through the step 2, use terminal commands to navigate to the folder 'out'.
    Once you are in the 'out' folder, type the following command in the terminal:

    
        cmake -S .. -B .


    It's likely that you get an error message that says something like:

    "CMake Error: The current CMakeCache.txt directory /home/atte/cpp_projects/DungeonCrawler/out/CMakeCache.txt is different than the directory /mnt/c/Users/Elias Viro/Documents/cpp-autumn2021/Project/dungeon-crawler-group-3/out where CMakeCache.txt was created. This may result in binaries being created in the wrong place. If you are not sure, reedit the CMakeCache.txt
    CMake Error: The source "/home/atte/cpp_projects/DungeonCrawler/CMakeLists.txt" does not match the source "/mnt/c/Users/Elias Viro/Documents/cpp-autumn2021/Project/dungeon-crawler-group-3/CMakeLists.txt" used to generate cache.  Re-run cmake with a different source directory."

    In that case, clear the contents of 'out' folder, i.e. delete everything in the folder and try the same cmake command again.

    Once you have run the cmake command above succesfully without errors, type the following command:


        make


    This command starts the actual compilation process for your test setting and you get compilation errors if there should be any. Once the compilation is run without errors and the executable is created, you can run the executable by typing.


        ./DungeonCrawler


    Note that once you have succesfully run the cmake command, you don't have to run it again to recompile your code. For example, if you have made changes to your code to fix compilation errors, you can recompile by only running the 'make' command again.